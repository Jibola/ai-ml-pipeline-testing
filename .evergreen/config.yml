###############################################
# Evergreen Template for AI-ML-Testing Pipeline
###############################################

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# Good rule of thumb: the averageish length a task takes, times 5
# That roughly accounts for variable system performance for various buildvariants
exec_timeout_secs:
  3600 # 60 minutes is the longest we'll ever run (primarily
  # for macos hosts)

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    - command: git.get_project
      params:
        directory: "src"

  "fetch repo":
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          if [ ! -d "${DIR}" ]; then
            echo '${REPO_NAME} could not be found' 1>&2
            exit 1
          fi
          cd ${DIR}
          git clone ${CLONE_URL}

  "execute tests":
    - command: subprocess.exec
      type: test
      params:
        add_expansions_to_env: true
        add_to_path: ["/home/ubuntu/.local/bin"]
        working_dir: "src/${DIR}/${REPO_NAME}"
        binary: bash
        args:
          - ../run.sh
  
  "install atlas cli": &install_atlas_cli
    command: shell.exec
    type: setup
    params:
      working_dir: mms
      script: |
        set -ex
        curl_opts='--silent --show-error --fail --location --retry 3'
        # We only need mongocli for Ops Manager tests, which only run on Linux.
        curl $curl_opts --output mongocli.tgz https://github.com/mongodb/mongocli/releases/download/v${mongocli_version}/mongocli_${mongocli_version}_linux_x86_64.tar.gz
        tar zxf mongocli.tgz
        mv mongocli_* mongocli
  
  "install atlascligit":
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -ex
          git clone https://github.com/mongodb/mongodb-atlas-cli.git
          cd mongodb-atlas-cli
          make install-atlascli
          atlas deployments setup ATLASCLI --type local --force
          atlas deployments start ATLASCLI
          CONN_STRING=$(atlas deployments connect ATLASCLI --connectWith connectionString) \
          python -c "from pymongo import MongoClient; import os; MongoClient(os.environ['CONN_STRING']).${DATABASE}.create_collection('${COLLECTION}')"
          atlas deployments search indexes create --file indexVector.json --deploymentName ATLASCLI


  "install local atlas":
  # TODO: Make this subprocess.exec
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          set -ex
          cd ${PROJECT_DIRECTORY}
          curl https://fastdl.mongodb.org/mongocli/mongodb-atlas-cli_1.13.0_macos_x86_64.zip -o mongodb-atlas-cli.zip
          unzip mongodb-atlas-cli.zip -d atlas
          alias atlas=${PROJECT_DIRECTORY}/atlas/bin/atlas

  # TODO: Still needs more fixing
  # Core steps
  #   connect to the local database
  #   create the database; create the collection
  #   create the predefined index from the provided `.json` file
  "provision local atlas":
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          alias atlas=${PROJECT_DIRECTORY}/atlas/bin/atlas
          set -ex
          cd ${PROJECT_DIRECTORY}
          atlas deployments setup EGDB --type local --force
          atlas deployments start EGDB
          CONN_STRING=$(atlas deployments connect EGDB --connectWith connectionString) \
          python -c "from pymongo import MongoClient; import os; MongoClient(os.environ['CONN_STRING']).${DATABASE}.create_collection('${COLLECTION}')"
          atlas deployments search indexes create --file indexVector.json --deploymentName EGDB

pre:
  - func: "fetch source"

tasks:
  - name: test-semantic-kernel-python
    commands:
      - func: "fetch repo"
      - func: "execute tests"

  - name: test-semantic-kernel-csharp
    commands:
      - func: "fetch repo"
      - func: "execute tests"

  - name: test-langchain-python
    commands:
      - func: "fetch repo"
      - func: "execute tests"

  - name: test-atlas-git
    commands:
      - func: "install atlascligit"

  - name: test-atlas-OG
    commands:
      - func: "install local atlas"
      - func: "provision local atlas"


buildvariants:
  - name: test-semantic-kernel-python-ubuntu
    display_name: Semantic-Kernel Ubuntu Python
    expansions:
      DIR: semantic-kernel-python
      REPO_NAME: semantic-kernel
      CLONE_URL: https://github.com/microsoft/semantic-kernel.git
    run_on:
      - ubuntu2204-small
    tasks:
      - name: test-semantic-kernel-python

  - name: test-semantic-kernel-csharp-ubuntu
    display_name: Semantic-Kernel Ubuntu CSharp
    expansions:
      DIR: semantic-kernel-csharp
      REPO_NAME: semantic-kernel
      CLONE_URL: https://github.com/microsoft/semantic-kernel.git
    run_on:
      - ubuntu2204-small
    tasks:
      - name: test-semantic-kernel-csharp

  - name: test-langchain-python-ubuntu
    display_name: Langchain Ubuntu Python
    expansions:
      DIR: langchain-python
      REPO_NAME: langchain
      CLONE_URL: https://github.com/langchain-ai/langchain.git
    run_on:
      - ubuntu2204-small
    tasks:
      - name: test-langchain-python
  
  - name: test-installation-git-ubuntu
    display_name: Atlas CLI Git test
    expansions:
      DATABASE: app
      COLLECTION: local
    run_on:
      - ubuntu2204-small
    tasks:
      - name: test-atlas-git

  - name: test-installation-OG-ubuntu
    display_name: Atlas CLI Git test
    expansions:
      DATABASE: app
      COLLECTION: local
      PROJECT_DIRECTORY: atlas
    run_on:
      - ubuntu2204-small
    tasks:
      - name: test-atlas-OG
      
